<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.chrisxyq</groupId>
    <artifactId>design-pattern</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <!--        责任链模式「模拟618电商大促期间，项目上线流程多级负责人审批场景」-->
        <module>chain-pattern</module>
        <!--        迭代器模式「模拟公司组织架构树结构关系，深度迭代遍历人员信息输出场景」-->
        <module>iterator-pattern</module>
        <!--        模版模式「模拟爬虫各类电商商品，生成营销推广海报场景」-->
        <module>template-method-pattern</module>
        <!--        访问者模式「模拟家长与校长，对学生和老师的不同视角信息的访问场景」-->
        <module>visitor-pattern</module>
        <!--        抽象工厂模式「替换Redis双集群升级，代理类抽象场景」-->
        <module>abstract-factory-pattern</module>
        <!--        工厂方法模式「多种类型商品不同接口，统一发奖服务搭建场景」-->
        <module>factory-method-pattern</module>
        <!--        单例模式「7种单例模式案例，Effective Java 作者推荐枚举单例模式」-->
        <module>singleton-pattern</module>
        <!--        桥接模式「多支付渠道(微信、支付宝)与多支付模式(刷脸、指纹)场景」-->
        <module>bridge-pattern</module>
        <!--        组合模式「营销差异化人群发券，决策树引擎搭建场景」-->
        <module>composite-pattern</module>
        <!--        享元模式「基于Redis秒杀，提供活动与库存信息查询场景」-->
        <module>flyweight-pattern</module>
        <!--        代理模式「模拟mybatis-spring中定义DAO接口，使用代理类方式操作数据库原理实现场景」-->
        <module>proxy-pattern</module>
        <!--        观察者模式「模拟类似小客车指标摇号过程，监听消息通知用户中签场景」-->
        <module>observer-pattern</module>
        <!--        备忘录模式「模拟互联网系统上线过程中，配置文件回滚场景」-->
        <module>memo-pattern</module>
    </modules>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.62</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <!-- LOGGING begin -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.5</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.9</version>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-api</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>RELEASE</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>


    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>

</project>